#include <Wire.h>

const int I2C_ADDR = 32;
const int pwm_pin = 8;
struct EncoderData {
int EncoderValue;
};

void receiveEvent(int sizeBytes) {
if(sizeBytes == sizeof(EncoderData))
{
uint8_t* array = new uint8_t[sizeof(EncoderData)];

Wire.readBytes(array, sizeof(EncoderData));

EncoderData* dataRec = reinterpret_cast<EncoderData>(array);
Serial.println(dataRec->EncoderValue);
analogWrite(pwm_pin, dataRec->EncoderValue);

delete[] array;
}
}

void setup() {
Wire.begin(I2C_ADDR);
Wire.onReceive(receiveEvent);
analogWriteFrequency(25000);
}

void loop() {
}
using Raven.Iot.Device;
using Raven.Iot.Device.MicrocontrollerBoard;
using System.Device.I2c;
using Iot.Device.RotaryEncoder;
using System.Device.Gpio;
using UnitsNet;

namespace Practice5
{
struct RequestData()
{
public int EncoderValue { get; set; }
}

struct ResponseData{

}

internal class Program
{
const int PinA = 0;
const int PinB = 1;

static void Main(string[] args)
{
if (DeviceHelper.I2cDeviceSearch([1], [32]) is [I2cConnectionSettings settings])
{
RequestData request = new RequestData();

MicrocontrollerBoard<RequestData, ResponseData> microcontrollerBoard = new MicrocontrollerBoard<RequestData, ResponseData>(settings);

using ScaledQuadratureEncoder encoder = new ScaledQuadratureEncoder(DeviceHelper.WiringPiToBcm(PinA), DeviceHelper.WiringPiToBcm(PinB), PinEventTypes.Falling, pulsesPerRotation: 20, pulseIncrement: 1.0, rangeMin: 0.0, rangeMax: 255.0);
encoder.Debounce = TimeSpan.FromMilliseconds(2);

encoder.ValueChanged += (obj, args) =>
{
request.EncoderValue = (int)args.Value;
Console.WriteLine(args.Value);
microcontrollerBoard.WriteRequest(request);
};

Console.ReadKey();
}
else
{
Console.WriteLine("Device is not founded");
}
}
}
}
