using System;
using System.IO;
using System.IO.Pipes;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Xml.Linq;


class PipeServer
{
    struct Numbers
    {
        public int number1;
        public int number2;
    }
    // Создаем новый мьютекс. Созданные потоки не владеют мьютексом.
    private static Mutex mut = new Mutex();
    private const int numIterations = 1;
    private const int numThreads = 2;
    static void Main()
    {
        PipeServer ex = new PipeServer();
        ex.StartThreads();

    }
    private void StartThreads()
    {   
        for (int i = 0; i < numThreads; i++)
        {
            Thread newThread = new Thread(ThreadProc);
            newThread.Name = String.Format("Thread{0}", i + 1);
            newThread.Start();
        }
    }
    static void ThreadProc()
    {
        for (int i = 0; i < numIterations; i++)
        {
            Thread1();
        }

    }
    static void Thread1()
    {
        Console.WriteLine("{0} запрашивает мьютекс",Thread.CurrentThread.Name);
        if (mut.WaitOne(100000))
        {
            Console.WriteLine("{0} вошел в защищенную зону", Thread.CurrentThread.Name);

            using (NamedPipeServerStream pipeServer =
             new NamedPipeServerStream("cspipe", PipeDirection.InOut))
            {
                Console.WriteLine("NamedPipeServerStream object создан.");

                //Ждем подключения клиента
                Console.Write("Ожидание подключения клиента...");
                pipeServer.WaitForConnection();

                Console.WriteLine("Клиент подключен.");

                Numbers cs = new();//Создаем объект структуры

                Console.Write("Введите number 1: ");//Вводим 1 число и проверяем чтобы это был int
                cs.number1 = int.TryParse(Console.ReadLine(), out int num1) ? num1 : 0;

                Console.Write("Введите number 2: ");//Вводим 2 число и проверяем чтобы это был int
                cs.number2 = int.TryParse(Console.ReadLine(), out int num2) ? num2 : 0;

                byte[] bytes = new byte[Unsafe.SizeOf<Numbers>()]; //Переводим структуру в байты
                Unsafe.As<byte, Numbers>(ref bytes[0]) = cs;
                pipeServer.Write(bytes);

                byte[] receivedBytes = new byte[Unsafe.SizeOf<Numbers>()];
                pipeServer.Read(receivedBytes);
                Numbers receivedData = Unsafe.As<byte, Numbers>(ref receivedBytes[0]);
                Console.WriteLine($"Передаваемые данные: Number 1 = {receivedData.number1}, Number 2 = {receivedData.number2}");

            }
            Thread.Sleep(500);

            Console.WriteLine("{0} покидает защищенную область",
                Thread.CurrentThread.Name);

            //отпускаем мьютекс
            mut.ReleaseMutex();
            Console.WriteLine("{0} освободил мьютекс",
                Thread.CurrentThread.Name);
        }
        else
        {
            Console.WriteLine("{0} не получил мьютекс",
                              Thread.CurrentThread.Name);
        }
    }
    ~PipeServer()
    {
        mut.Dispose();
    }
}
